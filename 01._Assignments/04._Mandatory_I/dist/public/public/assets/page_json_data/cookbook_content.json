{
    "data": [
        {
            "id": 0,
            "subTitle": "Learning Node",
            "title": "NodeJS",
            "codeExamples": [
                {
                    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Simple HTML Page</title>\n</head>\n<body>\n    <h1>Welcome to NodeJS</h1>\n    <p>This is a simple HTML page to demonstrate NodeJS static file serving.</p>\n</body>\n</html>"
                },
                {
                    "code": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`);\n});"
                }
            ],
            "description": "Welcome to the NodeJS Cookbook, your ultimate guide to mastering Node.js! This comprehensive resource is designed to take you on a journey through the fascinating world of Node.js, from its origins to its powerful current applications. Whether you're a beginner eager to dive into backend development or an experienced programmer looking to enhance your skill set, this cookbook has something for everyone. Through detailed code examples, explanations, and practical exercises, we'll explore the core concepts, advanced features, and best practices that make Node.js a top choice for developers around the globe. Get ready to unlock the full potential of Node.js and transform your ideas into reality!",
            "explanation": "In every section, you will find a variety of code examples and visual aids to complement the concepts discussed in the text. On the right side of the page, code snippets are presented to illustrate the practical application of Node.js features and best practices. These examples are carefully selected to enhance your understanding and provide a hands-on experience with Node.js programming. Additionally, images and diagrams may be used throughout to visually represent complex ideas, making it easier to grasp the theoretical and practical aspects of Node.js development. This combination of textual explanations, code examples, and visual aids is designed to provide a comprehensive learning experience, catering to different learning styles and preferences.",
            "keyPointHeader": "Keep an eye on this section!",
            "myKeyPoints": "This section will be the part where I'm beside the overall explanation above, will give my opinoin about what i find extra interesting about this/these learned features, and why i suggest to use it or being aware of it/them!"
        },
        {
            "id": 1,
            "subTitle": "What is NodeJS",
            "title": "Node what??",
            "codeExamples": [
                {
                    "code": "const http = require('http');\n\nhttp.createServer((req, res) => {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World\\n');\n}).listen(3000, '127.0.0.1');\n\nconsole.log('Server running at http://127.0.0.1:3000/');"
                },
                {
                    "code": "const fs = require('fs');\n\nfs.readFile('/path/to/file', 'utf8', function(err, data) {\n  if (err) throw err;\n  console.log(data);\n});"
                },
                {
                    "code": "const fs = require('fs');\n\nfs.writeFile('/path/to/file', 'Hello Node.js', (err) => {\n  if (err) throw err;\n  console.log('The file has been saved!');\n});"
                }
            ],
            "description": "Node what?? Exactly! If you've ever found yourself scratching your head, wondering what this 'NodeJS' everyone's talking about is, you're in the right place. Imagine JavaScript, but instead of just playing in the browser's sandbox, it's out there, running the whole beach! That's NodeJS for you - JavaScript's cooler, more versatile cousin that doesn't need a browser to live its best life.",
            "explanation": "So, why should you care? Well, besides the fact that it's everywhere (seriously, it's like the Swiss Army knife of programming languages), learning NodeJS is like unlocking a new level in your developer game. You'll go from 'just a front-end developer' to 'the one who can do it all'. Plus, it's an excellent party trick to impress your developer friends. 'Oh, you're still coding in just the browser? That's cute.'",
            "keyPointHeader": "Why NodeJS Rocks",
            "myKeyPoints": "1. It's JavaScript, but on steroids. 2. You can build literally anything with it - from small command-line tools to massive enterprise-level applications. 3. It's got a package manager (npm) that's like a candy store for developers; anything you need, it's got. 4. The community is fantastic. Got a problem? Someone's probably already solved it and posted the solution online."
        },
        {
            "id": 2,
            "subTitle": "Time to learn the basics",
            "title": "JS Basics",
            "codeExamples": [
                {
                    "code": "Variables, strings, numbers, floats\n\nExercise 1 - Console and constiables\n\nconst firstName = 'Anders';\nconst lastName = 'Latif';\n// EXERCISE\n// show in the console\n// My first name is Anders and my last name is Latif\n\nconst fullName = `${firstName} ${lastName}`;\n\nconsole.log(fullName)\n\nExercise 2 - Numbers and Strings\n\nconst year = '2023';\nconst increment = 1;\n\n// Add the year plus the increment\n// The result should be 2024\n// You cannot touch line 1 or 2\n\n// const currentYear = parseInt(year) + increment;\n// const currentYear = Number(year) + increment;\nconst currentYear = +year + increment;\n\nconsole.log(Number('1231af324'));\nconsole.log(parseInt('1231af324'));\n "
                }
            ],
            "description": "This section, titled 'JS Basics', introduces the foundational elements of JavaScript programming, including variables, strings, numbers, and basic operations. Through a series of exercises, I got to play with the creation and manipulation of variables, the concatenation of strings, and the handling of numerical data. This hands-on approach not only solidifies the understanding of basic syntax but also demonstrates the practical application of JavaScript in solving common programming tasks. By starting with the basics, this section lays the groundwork for more advanced topics in JavaScript programming.",
            "explanation": "1. Console and Variables: The first exercise introduces variables and string concatenation. Next thing I did, was to create variables to store first and last names, then use template literals to combine these into a full name, demonstrating the basics of variable manipulation and string handling. \n\n2. Numbers and Strings: This exercise delves into the conversion between strings and numbers, highlighting JavaScript's dynamic typing. I was shown how to add a numerical value to a string representing a year, using various methods to convert the string to a number. This illustrates the flexibility of JavaScript in handling different data types. \n\nThe exercises are designed to build a solid foundation in JavaScript, emphasizing the importance of understanding basic data types and operations. Through these examples, I gained practical experience in writing JavaScript code that manipulates variables, combines strings, and performs arithmetic operations.",
            "keyPointHeader": "Understanding the Basics",
            "myKeyPoints": "1. Variable Manipulation: Mastering the creation and use of variables is a fundamental skill in JavaScript. Variables are the building blocks of any JavaScript program, allowing for the storage and manipulation of data. \n\n2. String Handling: Learning to manipulate strings, including concatenation and template literals, is crucial for creating dynamic content. Strings are used extensively in JavaScript for displaying text, making web pages interactive, and more. \n\n3. Type Conversion: Understanding how to convert between different data types, especially between strings and numbers, is essential for performing arithmetic operations and data processing in JavaScript. This skill is particularly important when dealing with user input or data from different sources. \n\nThese key points highlight the importance of grasping JavaScript's basic concepts, which are critical for anyone looking to become proficient in web development or any area involving JavaScript programming."
        },
        {
            "id": 3,
            "subTitle": "Whats an Object?",
            "title": "Objects",
            "codeExamples": [
                {
                    "code": "Exercise 1 - Retrieve value from object by key\n\nconst myObject = { message: \"Hello, earthling! I bring peace.\" };\nconst messageOfObject = myObject.message;\nconsole.log(messageOfObject);\n\n// Log the message \nExercise 2 - Defining an object. \n\n// Create an object that has your name and age. \nconst newObject = {\n    name: \"Alex\",\n    age: 30\n}\n\nconsole.log(newObject)\nExercise 3 - Add a key-value pair \n\nconst stackOverflow = {};\n\n// make a rule called isAllowed and let the value be true\nstackOverflow.isAllowed = true;\n\nconsole.log(stackOverflow)\nExercise 4 - Remove a property \n\nconst thisSong = { description: \"The best song in the world.\" };\n\n// remove the property \"description\" and add a property called \"about\" that should say \"Just a tribute.\" \ndelete thisSong.description;\nthisSong.about = \"Just a tribute\";\n\nconsole.log(thisSong)\n\n\n// destruturing object\nconst something = {\n    Router: true,\n    Express: true,\n    Request: false,\n};\n\n\nconst { Router, Express, Request } = something; // This is called destructuring"
                }
            ],
            "description": "This section dives into the world of JavaScript objects, showcasing their versatility and power in representing data structures. Through a series of exercises, we'll look into how one can interact with objects, from retrieving and setting properties to more advanced operations like adding and removing keys. This approach not only solidifies my understanding of objects but also demonstrates their practical application in real-world scenarios.",
            "explanation": "In our exercise, we first begin with the basics of accessing object properties, such as retrieving the 'message' from a predefined object. This is followed by creating your own object, which helps in understanding how objects can store various data types. The next step involves modifying objects by adding new properties, showcasing the dynamic nature of JavaScript objects. An important skill, removing properties from objects, is also covered, illustrating how to manage and update object data effectively. Lastly, the concept of destructuring is introduced, a powerful feature that simplifies the extraction of properties from objects, making code cleaner and more readable.",
            "keyPointHeader": "Key Insights on JavaScript Objects",
            "myKeyPoints": "1. Flexibility and Dynamic Nature: JavaScript objects are incredibly flexible, allowing properties to be added or removed dynamically. This makes them ideal for representing complex data structures that may change over time. 2. Property Access and Manipulation: Understanding how to access and manipulate object properties is fundamental. This includes using dot notation for direct access and bracket notation for dynamic property names. 3. Destructuring: Destructuring is a concise way to extract multiple properties from objects into variables, reducing the amount of code needed for property access. 4. Practical Applications: Objects are the backbone of JavaScript data structuring. From configuring options for functions to representing complex datasets, In conclusion, mastering objects is crucial for any JavaScript developer."
        },
        {
            "id": 4,
            "subTitle": "Strings what?",
            "title": "Learning about Strings",
            "codeExamples": [
                {
                    "code": "Exercise 3 - Add numbers from string to float\n\nconst numberOne = \"1.10\";\nconst numberTwo = \"2.30\";\nconst result = parseFloat(numberOne) + parseFloat(numberTwo);\nconsole.log(result)\n\n// add those two numbers and show the result\n// you cannot touch line 1 neither line 2\n\n// Exercise 4 - Add the numbers and the total with 2 decimals\n\nconst anotherNumberOne = \"1.10\";\nconst anotherNumberTwo = \"2.30\";\n\n// make it keep two decimals\nconst anotherResult = parseFloat(anotherNumberOne) + parseFloat(anotherNumberTwo)\nconst anotherResult2 = (parseFloat(anotherNumberOne) + parseFloat(anotherNumberTwo)).toFixed(2)\n\nconsole.log(anotherResult.toFixed(2))\nconsole.log(anotherResult2)\n\n// Exercise 5 - Decimals and average\n\nconst one = 10;\nconst two = 45;\nconst three = 98;\n\n// Show in the console the avg. with 5 decimals\nconst avg = (one + two + three) / 3;\nconsole.log(avg)\n\n// Exercise 6 - Get the character by index\n\nconst letters = \"abc\";\n// Get me the character \"c\"\nconst character = letters.charAt(2);\nconst character2 = letters.substring(2,3);\nconst character3 = letters.replace(\"ab\",\"\");\nconst character4 = letters[2];\n\n console.log(character);\n console.log(character2);\n console.log(character3);\n console.log(character4);\n\n// Exercise 7 - Replace\n\nconst fact = \"You are learning javascript!\";\n\n// capitalize the J in Javascript\nconst newFact = fact.replace(\"j\", \"J\");\nconst newFact2 = fact.charAt(0).toUpperCase().concat(fact.slice(1));\nconst newFact3 = fact.substring(0, 1).toUpperCase().concat(fact.slice(1));\nconst newFact4 = fact[0].toUpperCase().concat(fact.slice(1));\n\nconsole.log(newFact)\nconsole.log(newFact2)\nconsole.log(newFact3)\nconsole.log(newFact4)\n\n\n"
                }
            ],
            "description": "This section is dedicated to exploring the intricacies of working with strings in JavaScript. Through a series of exercises, we'll explore how to perform common string operations such as converting strings to numbers, manipulating decimal places, accessing characters by index, and modifying string content. These exercises are designed to provide a practical understanding of how strings can be effectively used and manipulated in JavaScript programming.",
            "explanation": "The exercises start with converting string representations of numbers into floats and then performing arithmetic operations on them, highlighting the importance of type conversion in JavaScript. Following this, you'll explore how to format numbers to a specific number of decimal places, a common requirement in financial applications. Accessing individual characters within a string is covered next, demonstrating how strings can be treated as arrays of characters. The section concludes with exercises on replacing characters within strings, which is particularly useful for text processing tasks such as formatting user input or generating dynamic content. Each exercise builds on the previous ones, reinforcing key concepts and techniques for working with strings.",
            "keyPointHeader": "Essential String Manipulation Techniques",
            "myKeyPoints": "1. Type Conversion: Converting strings to numbers and vice versa is a fundamental skill, enabling the performance of arithmetic operations on data received as strings. 2. Precision Handling: Learning to control the number of decimal places in numerical outputs is crucial for presenting data accurately, especially in financial contexts. 3. Character Access: Understanding how to access and manipulate individual characters within strings is key for text analysis and manipulation tasks. 4. String Modification: Mastering string replacement and modification techniques allows for dynamic content generation and text formatting, enhancing the user experience. These key points underscore the versatility of strings in JavaScript and their importance in a wide range of programming scenarios."
        },
        {
            "id": 5,
            "subTitle": "Time for Arrays!",
            "title": "Array basics",
            "codeExamples": [
                {
                    "code": "Exercise 1 - Array Positioning\n\nconst letters = ['a', 'b', 'c'];\n// show b in the console \n\nconst b = letters[1];\nconsole.log(b);\n\nExercise 2 - Array Positioning\n\nconst friends = [];\n\n// What a lonely array. Add at least 3 friend objects to it.  \nfriends.push({name: 'Alex', age: 30}, {name: 'Bobby', age: 28}, {name: 'Timmothy', age: 45});\nconsole.log(friends);\n\nExercise 3 - Get the index of first occurance of that value. \n\nconst significantMathNumbers = [0, 2.718, 3.14159, 1729];\n\n// You want to programmatically find where the number 1729 is in the array.\n// programmatically means that no finger counting allowed. There is a method for this (finding index based of value). \n\nconst firstIndex = (() => {\n    return significantMathNumbers.findIndex(num => num === 1729);\n})();\n\nconsole.log(firstIndex);\n\nExercise 4 - Inserting elements\n\nconst diet = ['tomato', 'cucumber', 'rocket'];\n\n// You are a programmer. In one line (one statement) insert hamburger, soda and pizza between the elements cucumber and rocket\ndiet.splice(2, 0, 'hamburger', 'soda', 'pizza');\nconsole.log(diet);\n\nExercise 5 - Remove element\n\n// Remove the LAST element of the array.\n// Don't remove by index. You know in advance that it's the last in the array because you are too full already. \ndiet.pop();\nconsole.log(diet);\n\nExercise 6 - Copy array\n\n// You really like your daily diet from last exercise. Copy it to a new array called dinnerTray so you can give it to a friend.  \nconst dinnerTray = [...diet];\nconsole.log(dinnerTray);\n\nExercise 7 - For loop\n\nconst lettersExpanded = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n\n// log every second char in the array starting from b\n(() => {\n    for (let i = 2; i < lettersExpanded.length; i += 2) {\n        console.log(lettersExpanded[i]);\n    }\n})();\n\nExercise 8 - For loop and if statement\n\nconst numbers  = [5, 3, 2, 7, 11, 12, 0, -20, 6];\n\nconst discardedNumbers = [];\n\n// log the element if the number is above 6 or below 0\n// else push them to the array discardedNumbers\n\nnumbers.forEach(num => (num > 6 || num < 0) ? discardedNumbers.push(num) : '')\nconsole.log(discardedNumbers)"
                }
            ],
            "description": "Learning about arrays in JavaScript was a rewarding experience. Starting simple: I began by grasping the fundamental operations like adding and removing elements. It involved understanding how individual items were stored within the array using their numerical positions (indexes). Gradual progression: Along getting more knowhow around arrays, it was time for further exploration. This included accessing specific elements within the array using their indexes, similar to pinpointing items on a numbered list. The next step was delving into methods for manipulating the entire array at once. This involved techniques for sorting, filtering, and transforming the data efficiently. This step-by-step approach proved to be highly effective. Solid foundation: By starting with the basics and gradually building upon them, I solidified my understanding of core array functionalities. Advanced concepts: This equipped me with the skills to explore more advanced array manipulation techniques, broadening my problem-solving abilities. Overall, mastering arrays has been a crucial step in my journey as a JavaScript programmer. It has empowered me to handle and organize data effectively, opening doors to tackle more complex programming tasks.",
            "explanation": "Accessing and Adding Elements: This initial stage focuses on understanding how to retrieve specific items within an array using their index (position). You'll also learn how to add new elements to the end of the array, building a solid foundation for further manipulation.  Finding Element's Index: As you progress, you'll encounter the findIndex method. This method plays a crucial role in efficiently locating the exact position of a specific value within the array. This skill becomes essential when you need to precisely manipulate elements based on their location.  Inserting and Removing Elements:  This section dives into the splice method, a versatile tool for both inserting new elements at a specific position and removing existing elements from the array. Mastering splice allows you to dynamically modify the contents of your arrays on the fly.  Copying Arrays:  Here, you'll explore how to create duplicate copies of arrays using the spread operator (...). This technique is valuable for creating independent versions of the original array, allowing you to modify the copy without affecting the original data.  Iterating Over Arrays:  The final step emphasizes iterating through arrays using loops and the forEach method. This provides hands-on experience in processing individual elements based on specific conditions and manipulating them during the iteration process. Mastering these techniques is fundamental for efficiently analyzing and transforming data stored in arrays.  By following these steps and completing the exercises, you'll gain practical experience with core array functionalities in JavaScript, empowering you to effectively manipulate and interact with them in various scenarios.",
            "keyPointHeader": "Arrays are cool!",
            "myKeyPoints": "Arrays in JavaScript are incredibly versatile and powerful tools for developers. They allow for the storage and manipulation of lists of data in an efficient and intuitive manner. Here are a few key points that I find particularly interesting and useful: 1. Dynamic Nature: Arrays in JavaScript can grow and shrink in size dynamically, making them incredibly flexible for handling data that changes over time. 2. Array Methods: JavaScript provides a plethora of methods for working with arrays, such as map(), filter(), reduce(), and more. These methods can greatly simplify the process of data manipulation and analysis. 3. Iteration: The ability to iterate over arrays using loops or array-specific methods like forEach() makes it easy to process and manipulate each element in an array. 4. Multi-dimensionality: Arrays can contain other arrays, allowing for the creation of complex data structures like matrices. This is particularly useful in applications that require a multi-dimensional data model. 5. Performance: While arrays are generally fast and efficient, understanding how to manipulate them in performance-critical applications can make a significant difference. Techniques such as avoiding unnecessary array resizing and leveraging typed arrays for binary data can enhance performance. In conclusion, mastering arrays and their methods can significantly improve your JavaScript programming skills and enable you to handle data more effectively."
        },
        {
            "id": 6,
            "subTitle": "Changing to Server",
            "title": "Express is in 'da house!",
            "codeExamples": [
                {
                    "code": "const express = require('express');\nconst app = express();\nconst PORT = 8080;\n\n// Define a route handler for the default home page\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\n// Define a route handler for the /about page\napp.get('/about', (req, res) => {\n  res.send('About us');\n});\n\n// Start the server on port 8080\napp.listen(PORT, () => {\n  console.log(`Example app listening at http://localhost`, PORT);\n});\n\n"
                }
            ],
            "description": "In this section, we'll look into the realm of server-side development with Express.js, a popular Node.js web application framework. In this example we are setting up a basic web server, defining route handlers, and starting the server on a specified port. This practical experience helps in understanding how to create and manage server-side logic for web applications.",
            "explanation": "First we import the module by through 'requiring' the Express module and creating an app instance. Then, I defined a simple route handler for the home page that responds with 'Hello World!' to demonstrate how to handle HTTP GET requests. Following this, I added another route handler for an '/about' page, showcasing how to serve different content based on the requested URL. Finally, to start the server on port 8080 and log a message to the console, indicating that the server is running and listening for incoming requests. This exercise solidified my understanding of the basics of Express.js and its role in building web applications.",
            "keyPointHeader": "My Key Takeaways on Express.js",
            "myKeyPoints": "1. Simplicity and Flexibility: Express.js makes it straightforward to set up a server and define route handlers, demonstrating its simplicity and flexibility in handling web requests. 2. Route Handling: Learning to define routes and their handlers is crucial for developing web applications that respond to different URLs and HTTP methods. 3. Server Initialization: Understanding how to start a server and listen on a specific port is fundamental for any web application, allowing it to accept and respond to client requests. 4. Practical Application: This hands-on experience with Express.js has equipped me with the knowledge to create basic web servers and has paved the way for more complex backend development tasks."
        },
        {
            "id": 7,
            "subTitle": "Advanced Express",
            "title": "Express for geeks!",
            "codeExamples": [
                
            ]
        }
    ]
}