{
  "code": "const express = require(\"express\");\nconst app = express();\n\n\napp.use(express.json());\n\n\nconst drinks = [\n    {\n        id: 1,\n        name: \"Bloody Mary\",\n        ingredients: [\"vodka\", \"tomato juice\", \"spices\"],\n        currency: \"DKK\",\n        priceValue: 32.0\n    },\n    {\n        id: 2,\n        name: \"Mojito\",\n        ingredients: [\"lime\", \"rum\", \"sugarcane\", \"mint\"],\n        currency: \"$\",\n        priceValue: 4.0\n    },\n    {\n        id: 3,\n        name: \"Black Russian\",\n        ingredients: [\"vodka\", \"kahlua\", \"coffee beans\"],\n        currency: \"DKK\",\n        priceValue: 25.00\n    },\n    {\n        id: 4,\n        name: \"White Russian\",\n        ingredients: [\"vodka\", \"kahlua\", \"milk\", \"coffee beans\"],\n        currency: \"$\",\n        priceValue: 4.0\n    },\n    {\n        id: 5,\n        name: \"Gin Fizz\",\n        ingredients: [\"gin\", \"lemon juice\", \"sugar\"],\n        currency: \"DKK\",\n        priceValue: 30.00\n    }\n]\n\n\n// Get ---- \napp.get(\"/drinks\", (req, res) => {\n    res.send({ data: drinks });\n});\n\napp.get(\"/drinks/:id\", (req, res) => {\n    const id = isNaN(req.query.id) ? req.params.id : Number(req.query.id);\n    const drink = drinks.find(drink => drink.id === id);\n\n    if (drink === undefined) {\n        res.status(404).send({ data: \"Drink not found\" });\n    } else {\n        return res.send({ data: drink });\n    }\n});\n\napp.get(\"/drinks/name/:name\", (req, res) => {\n    const name = req.params.name;\n    const drink = drinks.find(drink => drink.name === name);\n\n    if (drink.length < 1) res.status(404).send({ data: \"Drink'/s not found\" });\n\n    res.send({ data: drink });\n});\n\n\napp.get(\"/drinks/ingredients/:ingredient\", (req, res) => {\n    const ingredient = req.params.ingredient;\n    const foundIngredient = drinks.some(\n        (drink) => drink.ingredients.includes(ingredient)\n    );\n\n    if (!foundIngredient) return res.status(404).send({ data: \"Drinks not found\" });\n\n    const filteredDrinksByIngredient = drinks.filter(\n        (drink) => drink.ingredients.includes(ingredient)\n    );\n    res.send({ data: filteredDrinksByIngredient });\n\n});\n\napp.get(\"/drinks/priceUnder/:value\", (req, res) => {\n    const value = parseFloat(req.params.value);\n    const drinksUnderValue = drinks.filter(drink => drink.priceValue < value);\n\n    if (drinksUnderValue.length < 1) return res.status(404).send({ data: \"No drinks found, with requested ingredient\" });\n    res.send({ data: drinksUnderValue });\n});\n\napp.get(\"/drinks/currency/:currency\", (req, res) => {\n    const currency = req.params.currency;\n    const filteredDrinksOnCurrency = drinks.filter(drink => drink.currency === currency);\n\n    if (filteredDrinksOnCurrency.length < 1) return res.status(404).send({ data: \"Drinks not found\" });\n    res.send({ data: filteredDrinksOnCurrency });\n})\n\n\n// Post ----\napp.post(\"/drinks\", (req, res) => {\n    const { name, ingredients, currency, priceValue } = req.body;\n\n    if (typeof name !== \"string\" || !Array.isArray(ingredients) || typeof currency !== \"string\" || typeof priceValue !== \"number\") {\n        return res.status(400).send({ data: \"Invalid input format\" });\n     }\n     \n    const newDrink = {\n        id: drinks.length + 1,\n        name,\n        ingredients,\n        currency,\n        priceValue\n    };\n\n    drinks.push(newDrink);\n    res.status(201).send({ data: newDrink });\n});\n\n\n// Put -----\napp.put(\"/drinks/:id\", (req, res) => {\n    const id = parseInt(req.params.id);\n    const { name, ingredients, currency, priceValue } = req.body;\n    const drinkIndex = drinks.findIndex(drink => drink.id === id);\n\n    if (drinkIndex === -1) return res.status(404).send({ data: \"Drink not found\" });\n\n    const updatedDrink = { id, name, ingredients, currency, priceValue };\n    drinks[drinkIndex] = updatedDrink;\n    res.send({ data: updatedDrink });\n});\n\n\n// Patch ----\napp.patch(\"/drinks/:id\", (req, res) => {\n    const id = parseInt(req.params.id);\n    const drink = drinks.find(drink => drink.id === id);\n\n    if (!drink) return res.status(404).send({ data: \"Drink not found\" });\n\n    Object.entries(req.body).map(([key, value]) => {\n        drink[key] = value;\n    });\n\n    res.send({ data: drink });\n});\n\n\n// Delete -----\napp.delete(\"/drinks/:id\", (req, res) => {\n    const id = parseInt(req.params.id);\n    const drinkIndex = drinks.findIndex(drink => drink.id === id);\n\n    if (drinkIndex === -1) return res.status(404).send({ data: \"Drink not found\" });\n\n    drinks.splice(drinkIndex, 1);\n    res.status(200).send({data: \"Drink has been deleted\"});\n});\n\n\n\n// ---- EXTRA \n\n// OPTION ----\napp.options(\"/drinks\", (req, res) => {\n    res.header(\"Allow\", \"GET,POST,OPTIONS\");\n    res.header(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n    res.header(\"Access-Control-Allow-Headers\", \"Content-Type\");\n    res.sendStatus(204);\n});\n\n\n// HEAD ----\napp.head(\"/drinks\", (req, res) => {\n    res.header(\"Content-Type\", \"application/json\");\n    res.status(200).end();\n});\n\napp.head(\"/drinks/:id\", (req, res) => {\n    const id = parseInt(req.params.id);\n    const drinkExists = drinks.some(drink => drink.id === id);\n\n    if (!drinkExists) return res.status(404).end();\n    res.status(200).end();\n});\n\n\n\n\napp.listen(8080, () => console.log(\"Server is running on 8080\"));"
}