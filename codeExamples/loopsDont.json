{
  "code": "/* \n    Rules: Always use loop methods in modern JS. \n    for loops are only used when finger counting is needed (counting to a number).\n*/\n\nconst numbers = [6, 7, 8, 9];\n\n/* \nArgument 1: Brevity\nArgument 2: Clarity (loop methods communicate intend)\nArgument 3: No accidental indexing errors (out of bounds)\n*/\nfor (let i = 0; i < numbers.length; i++) {\n    console.log(numbers[i]);\n}\n\nnumbers.forEach(number => console.log(number));\n\n/* \nArgument 4: number of/in numbers confusion\nArgument 5: not being able to access both element and index\nArgument 6: side effects!!!\n*/\nlet oddIndexSideEffect = [];\nlet index = 0;\nfor (number of numbers) {\n    if (index % 2 === 1) {\n        oddIndexSideEffect.push(Number(number));\n    }\n    index++;\n}\nconsole.log(oddIndexSideEffect);\n\nconst oddNumbers = numbers.filter((element, index) => index % 2 === 1);\nconsole.log(oddNumbers);\n\n/* Argument 7: Don't mutate the original list */\nfor (index in numbers) {\n    numbers[index] = numbers[index] * 2;    \n}\n\nconst doubledList = numbers.map(number => number * 2);\n\nconsole.log(numbers);\nconsole.log(doubledList);"
}